<?php
// default views for Total Control
include_once('includes/total_control.views.inc');

// This is the name of the dashboard as the delegate module sees it via the page task.
define('TOTAL_CONTROL_DASHBOARD_PANEL_NAME', 'dashboard');

/* 
 * Implementation of hook_perm
 * adds permissions for access to the total control dashboard
 */
function total_control_perm() {
 return array('have total control', 'administer total control');
}

/* 
 * Implementation of hook_menu
 * adds the total control dashboard
 */
function total_control_menu() {
  $items = array();
  
  $items['admin/dashboard/install'] = array(
    'title' => 'Total Control Dashboard Install',
    'page callback' => 'total_control_dashboard_install',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );
  $items['admin/settings/total_control'] = array(
    'title' => 'Total Control',
    'description' => 'Adjust administration menu settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('total_control_admin_settings'),
    'access arguments' => array('administer total control'),
  );

  return $items;
}

/* menu callback */
function total_control_dashboard_install() {
  // Install the dashboard
  _total_control_install_dashboard();
  
  // Set message saying what we did
  drupal_set_message(t('The Total Control Dashboard was installed.'));
  
  // Redirect to status report
  drupal_goto('admin/reports/status');
}

/* menu callback */
function total_control_admin_settings(){
  $form['total_control_configure_links'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show configure links on "Create Content" panel'),
    '#default_value' => variable_get('total_control_configure_links', 1),
    '#description' => t('Configure links go to the edit content type pages'),
    );
    return system_settings_form($form);
}

/**
 * Implementation of hook_ctools_plugin_dierctory() to let the system know
 * we implement task and task_handler plugins.
 */
function total_control_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implementation of hook_init().
 */
function total_control_init() {
  // We do this here since it should be after all required modules are enabled.
  _total_control_attempt_install_dashboard(TRUE);
}

/* 
 * Implementation of hook_form_alter
 * adds views adjustment handling when workflows are added or removed
 */
function total_control_form_alter(&$form, $form_state, $form_id) {
  if ('node_type_form' == $form_id) {
    $form['#submit'][] = '_total_control_views_add_display';
    //$form['#submit'] = array('_total_control_views_delete_display');
  }
  if ('node_type_delete_confirm' == $form_id) {
    $form['#submit'][] = '_total_control_views_delete_display';
    //$form['#submit'] = array('_total_control_views_delete_display');
  }
}
 
/* Helper function.  Adds view displays. */
function _total_control_views_add_display($form, &$form_state){
  // compose the state name
  $type = '';
  $machine = '';
  $name = '';
  $plural_type = _total_control_pluralize($name);
  
  // get the view
  $view = views_get_view('control_content');
  
  // create a panel pane
  
  $handler = $view->new_display('panel_pane', 'New '.$plural_type.' pane', 'panel_pane_tc_'.$type);
  $handler->override_option('fields', array(
    'title' => array(
      'label' => '',
      'alter' => array(
        'alter_text' => 0,
        'text' => '',
        'make_link' => 0,
        'path' => '',
        'alt' => '',
        'prefix' => '',
        'suffix' => '',
        'help' => '',
        'trim' => 0,
        'max_length' => '',
        'word_boundary' => 1,
        'ellipsis' => 1,
        'html' => 0,
      ),
      'link_to_node' => 1,
      'exclude' => 0,
      'id' => 'title',
      'table' => 'node',
      'field' => 'title',
      'relationship' => 'none',
      'override' => array(
        'button' => 'Use default',
      ),
    ),
    'type' => array(
      'label' => '',
      'alter' => array(
        'alter_text' => 0,
        'text' => '',
        'make_link' => 0,
        'path' => '',
        'alt' => '',
        'prefix' => '',
        'suffix' => '',
        'help' => '',
        'trim' => 0,
        'max_length' => '',
        'word_boundary' => 1,
        'ellipsis' => 1,
        'html' => 0,
      ),
      'link_to_node' => 0,
      'exclude' => 0,
      'id' => 'type',
      'table' => 'node',
      'field' => 'type',
      'override' => array(
        'button' => 'Use default',
      ),
      'relationship' => 'none',
    ),
    'created' => array(
      'label' => '',
      'alter' => array(
        'alter_text' => 0,
        'text' => '',
        'make_link' => 0,
        'path' => '',
        'alt' => '',
        'prefix' => '',
        'suffix' => '',
        'help' => '',
        'trim' => 0,
        'max_length' => '',
        'word_boundary' => 1,
        'ellipsis' => 1,
        'html' => 0,
      ),
      'date_format' => 'time ago',
      'custom_date_format' => 'm/d g:ia',
      'exclude' => 0,
      'id' => 'created',
      'table' => 'node',
      'field' => 'created',
      'override' => array(
        'button' => 'Use default',
      ),
      'relationship' => 'none',
    ),
  ));
  $handler->override_option('filters', array(
    'type' => array(
      'operator' => 'in',
      'value' => array(
        $type=> $type,
      ),
      'group' => '0',
      'exposed' => FALSE,
      'expose' => array(
        'operator' => FALSE,
        'label' => '',
      ),
      'id' => 'type',
      'table' => 'node',
      'field' => 'type',
      'override' => array(
        'button' => 'Use default',
      ),
      'relationship' => 'none',
    ),
  ));
  $handler->override_option('title', 'New '.$plural_type);
  $handler->override_option('items_per_page', 5);
  $handler->override_option('use_pager', '0');
  $handler->override_option('use_more', 1);
  $handler->override_option('style_plugin', 'list');
  $handler->override_option('style_options', array());
  $handler->override_option('row_options', array(
    'inline' => array(
      'title' => 'title',
      'type' => 'type',
      'edit_node' => 'edit_node',
    ),
    'separator' => '',
  ));
  $handler->override_option('pane_title', 'New Content');
  $handler->override_option('pane_description', 'Total Control '.$name.' summary');
  $handler->override_option('pane_category', array(
    'name' => 'Admin Dashboard',
    'weight' => '0',
  ));
  $handler->override_option('allow', array(
    'use_pager' => 0,
    'items_per_page' => 'items_per_page',
    'offset' => 0,
    'link_to_view' => 0,
    'more_link' => 0,
    'path_override' => 0,
    'title_override' => FALSE,
    'exposed_form' => FALSE,
  ));
  $handler->override_option('argument_input', array());
  $handler->override_option('link_to_view', '0');
  $handler->override_option('inherit_panels_path', 0);
  
  // create a page
  
  $handler = $view->new_display('page', 'New '.$plural_type.' Page', 'page_tc_'.$type);
  $handler->override_option('filters', array(
    'status' => array(
      'operator' => '=',
      'value' => '1',
      'group' => '0',
      'exposed' => TRUE,
      'expose' => array(
        'operator' => '',
        'identifier' => 'status',
        'label' => 'Published',
        'optional' => 1,
        'remember' => 0,
      ),
      'id' => 'status',
      'table' => 'node',
      'field' => 'status',
      'relationship' => 'none',
      'override' => array(
        'button' => 'Override',
      ),
    ),
    'type' => array(
      'operator' => 'in',
      'value' => array(),
      'group' => '0',
      'exposed' => TRUE,
      'expose' => array(
        'use_operator' => 0,
        'operator' => 'type_op',
        'identifier' => 'type',
        'label' => 'Type',
        'optional' => 1,
        'single' => 1,
        'remember' => 0,
        'reduce' => 0,
      ),
      'id' => 'type',
      'table' => 'node',
      'field' => 'type',
      'relationship' => 'none',
    ),
    'keys' => array(
      'operator' => 'optional',
      'value' => '',
      'group' => '0',
      'exposed' => TRUE,
      'expose' => array(
        'use_operator' => 0,
        'operator' => 'keys_op',
        'identifier' => 'keys',
        'label' => 'Search:',
        'optional' => 1,
        'remember' => 0,
      ),
      'id' => 'keys',
      'table' => 'search_index',
      'field' => 'keys',
      'relationship' => 'none',
    ),
    'uid' => array(
      'operator' => 'in',
      'value' => '',
      'group' => '0',
      'exposed' => TRUE,
      'expose' => array(
        'use_operator' => 0,
        'operator' => 'uid_op',
        'identifier' => 'uid',
        'label' => 'Author',
        'optional' => 1,
        'remember' => 0,
        'reduce' => 0,
      ),
      'id' => 'uid',
      'table' => 'users',
      'field' => 'uid',
      'relationship' => 'none',
    ),
    'type_1' => array(
      'operator' => 'in',
      'value' => array(
        $type => $type,
      ),
      'group' => '0',
      'exposed' => FALSE,
      'expose' => array(
        'operator' => FALSE,
        'label' => '',
      ),
      'id' => 'type_1',
      'table' => 'node',
      'field' => 'type',
      'override' => array(
        'button' => 'Use default',
      ),
      'relationship' => 'none',
    ),
  ));
  $handler->override_option('title', 'Manage '.$plural_type);
  $handler->override_option('path', 'admin/dashboard/content/'.$machine);
  $handler->override_option('menu', array(
    'type' => 'tab',
    'title' => 'Manage '.$plural_type,
    'description' => '',
    'weight' => '0',
    'name' => 'navigation',
  ));
  $handler->override_option('tab_options', array(
    'type' => 'none',
    'title' => '',
    'description' => '',
    'weight' => 0,
  ));
  
  // save the view
  $view->save();
  
  return;
}

/* Helper function.  Removes view displays. */
function _total_control_views_remove_display($form, &$form_state){
  $sid = $form_state['values']['sid'];
  
  // get the view
  $view = views_get_view('control_workflow');
  
  // delete the corresponding display
  unset($view->display['panel_pane_tcw_sid_'.$sid]);
  
  // save the view
  $view->save();
  
  return;
}

/**
 * Helper function
 * helps install the dashboard page, panel, and panes
 */
function _total_control_attempt_install_dashboard($silent = FALSE) {
  // See if required modules are available so we can install the dashboard right away
  if (function_exists('delegator_get_tasks')) {
    _total_control_install_dashboard();
  }
  // Else, we need to give the user a message with a link to install the dashboard
  else {
    if (!$silent) {
      drupal_set_message(
        t(
          'The Total Control module has been enabled, but was unable to verify if the dashboard was installed correctly. Please check the !status_report.',
          array(
            '!status_report' => l(t('Status Report'), 'admin/reports/status'),
          ),
          'error'
        )
      );
    }
  }
}

/**
 * Helper function based on the delegator page import form:
 * delegator/plugins/tasks/page.admin.inc: delegator_page_import_subtask()
 */
function _total_control_install_dashboard() {
  // Make sure we haven't already imported the total control dashboard panel
  delegator_get_tasks();
  $cache = delegator_page_get_page_cache(TOTAL_CONTROL_DASHBOARD_PANEL_NAME);
  if (isset($cache) && isset($cache->pid)) {
    return FALSE;
  }

  // Load up the page
  include(drupal_get_path('module', 'total_control') .'/includes/total_control.page.inc');

  // Make sure the page object is readable
  if (!isset($page) || !is_object($page)) {
    return FALSE;
  }

  // Set some needed flags (Are these needed if we skip the intermediate edit step import uses?)
  ctools_include('export');
  $page->export_type = EXPORT_IN_DATABASE;
  $page->type = t('Normal');
  $page->import = TRUE;

  // Save the page
  delegator_page_save($page);
  
  // Clear the cache
  delegator_page_clear_page_cache(TOTAL_CONTROL_DASHBOARD_PANEL_NAME);

  // Force a menu rebuild to recognize our new subtask
  menu_rebuild();
  
  return TRUE;
}

function _total_control_pluralize($word){
  $word = trim($word);
  if (substr($word, 0, -1) == 'y'){
    $removed = strlen($word) -1;
    $plural = substr($word, 0, $removed) . 'ies';
  }
  else {
    $plural = $word . 's';
  }
  return $plural;
}

/**
 * Implementation of hook_views_pre_view.
 * alters more links on panel panes: preset the filters

function total_control_views_pre_view(&$view, &$display_id, &$args) {
  if ($display_id == 'panel_pane_2') {
    //print_r($view->display[$display_id]);exit;
  }
}

/**
 * Implementation of hook_views_pre_render.
 * alters more links on panel panes: preset the filters

function total_control_views_pre_render(&$view) {
  if ($view->name == 'control_content') {
    print_r($view->display);exit;
  }
}
 */