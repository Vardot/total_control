<?php
// default views for Total Control
include_once('includes/total_control.default_views.inc');

// This is the name of the dashboard as the page manager module sees it via the page task.
define('TOTAL_CONTROL_DASHBOARD_PANEL_NAME', 'dashboard');
define('TOTAL_CONTROL_MINIMUM_VERSION', 1);
define('TOTAL_CONTROL_VERSION', 1);

/* 
 * Implementation of hook_perm
 * adds permissions for access to the total control dashboard
 */
function total_control_perm() {
  return array('have total control', 'administer total control');
}

/* 
 * Implementation of hook_menu
 * adds the total control dashboard
 */
function total_control_menu() {
  $items = array();

  $items['admin/settings/total_control'] = array(
    'title' => 'Total Control',
    'description' => 'Adjust administration menu settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('total_control_admin_settings'),
    'access arguments' => array('administer total control'),
  );

  return $items;
}

/* menu callback */
function total_control_admin_settings(){
  $form['total_control_configure_links'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show configure links on "Create Content" panel'),
    '#default_value' => variable_get('total_control_configure_links', 1),
    '#description' => t('Configure links go to the edit content type pages'),
    );
  return system_settings_form($form);
}

/* 
 * Implementation of hook_form_alter
 * adds views adjustment handling when workflows are added or removed
 */
function total_control_form_alter(&$form, $form_state, $form_id) {
  if ('node_type_form' == $form_id) {
    $form['#submit'][] = '_total_control_views_add_display';
  }
  if ('node_type_delete_confirm' == $form_id) {
    $form['#submit'][] = '_total_control_views_delete_display';
  }
}

/**
 * Implementation of hook_ctools_plugin_api()
 * Needed so that next hooks are picked up.
 */
function total_control_ctools_plugin_api($module, $api) {
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }  
}

/**
 * Implementation of hook_ctools_plugin_dierctory()
 * to let the system know we implement task and task_handler plugins.
 */
function total_control_ctools_plugin_directory($module, $plugin) {
  return 'plugins/' . $plugin;
}

/**
 * Implementation of hook_default_page_manager_handlers()
 */
function total_control_default_page_manager_handlers() {
  $handlers = array();
  include_once('includes/total_control.default_page.inc');
  return $handlers;
}

/**
* Implementation of hook_views_api().
* TODO
**/
function total_control_views_api() {
  return array(
    'api' => 2,
  );
}
 
/* Helper function.  Adds view displays. */
function _total_control_views_add_display($form, &$form_state){
  
  // compose the vars we ned for the view
  $machine_type = $form_state['values']['type'];
  $content_type = $form_state['values']['name'];
  
  // get the view
  $view = views_get_view('control_content');
  
  // create a panel pane - 'includes/total_control.views.inc'
  total_control_add_views_pane_display(&$view, $content_type, $machine_type);
  
  // create a page - 'includes/total_control.views.inc'
  total_control_add_views_page_display(&$view, $content_type, $machine_type);
  
  // save the view
  $view->save();
  
  return;
}

/* Helper function.  Removes view displays. */
function _total_control_views_delete_display($form, &$form_state){

  // get the type  
  $type = $form_state['values']['type'];
  
  // get the view
  $view = views_get_view('control_content');
  
  // delete the corresponding display
  unset($view->display['panel_pane_tc_'.$type]);
  unset($view->display['page_tc_'.$type]);
  
  // save the view
  $view->save();
  
  return;
}

/* Helper function.  Changes type names into plurals. */
function _total_control_pluralize($word){
  $word = trim($word);
  if (substr($word, -1, 1) == 'y'){
    $removed = strlen($word) - 1;
    $plural = substr($word, 0, $removed) . 'ies';
  }
  else if (substr($word, -1, 1) == 's'){
    $plural = $word;
  }
  else {
    $plural = $word . 's';
  }
  return $plural;
}